<?php
/* 
 * Generated by CRUDigniter v3.2 
 * www.crudigniter.com
 */
 
class Events extends CI_Controller{
    function __construct()
    {
        parent::__construct();
        $this->load->model('Event_model');
    } 

    /*
     * Listing of events
     */
    function index()
    {
         
        $data = array( 
		'base_href' => base_url(), 
		'page_title' => 'Events', 
		'events' => $this->Event_model->get_all_events()
	);
        $this->load->view('template_part/header', $data);
        $this->load->view('event/index',$data);
        $this->load->view('template_part/header', $data);
    }

    /*
     * Adding a new event
     */
    function add()
    {   
        $this->load->library('form_validation');

		$this->form_validation->set_rules('covercharge','Covercharge','required');
		$this->form_validation->set_rules('owneruuid','Owneruuid','required');
		$this->form_validation->set_rules('name','Name','required|max_length[255]');
		$this->form_validation->set_rules('creatoruuid','Creatoruuid','required');
		$this->form_validation->set_rules('category','Category','required|integer');
		$this->form_validation->set_rules('dateUTC','DateUTC','required|integer');
		$this->form_validation->set_rules('duration','Duration','required|integer');
		$this->form_validation->set_rules('coveramount','Coveramount','required|integer');
		$this->form_validation->set_rules('simname','Simname','required|max_length[255]');
		$this->form_validation->set_rules('parcelUUID','ParcelUUID','required');
		$this->form_validation->set_rules('globalPos','GlobalPos','required|max_length[255]');
		$this->form_validation->set_rules('eventflags','Eventflags','required|integer');
		$this->form_validation->set_rules('description','Description','required');
		
		if($this->form_validation->run())     
        {   
            $params = array(
				'covercharge' => $this->input->post('covercharge'),
				'category' => $this->input->post('category'),
				'eventflags' => $this->input->post('eventflags'),
				'owneruuid' => $this->input->post('owneruuid'),
				'name' => $this->input->post('name'),
				'creatoruuid' => $this->input->post('creatoruuid'),
				'dateUTC' => $this->input->post('dateUTC'),
				'duration' => $this->input->post('duration'),
				'coveramount' => $this->input->post('coveramount'),
				'simname' => $this->input->post('simname'),
				'parcelUUID' => $this->input->post('parcelUUID'),
				'globalPos' => $this->input->post('globalPos'),
				'description' => $this->input->post('description'),
            );
            
            $event_id = $this->Event_model->add_event($params);
            redirect('events/index');
        }
        else
        {            
            $data['_view'] = 'event/add';
            $this->load->view('layouts/main',$data);
        }
    }  

    /*
     * Editing a event
     */
    function edit($eventid)
    {   
        // check if the event exists before trying to edit it
        $data['event'] = $this->Event_model->get_event($eventid);
        
        if(isset($data['event']['eventid']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('covercharge','Covercharge','required');
			$this->form_validation->set_rules('owneruuid','Owneruuid','required');
			$this->form_validation->set_rules('name','Name','required|max_length[255]');
			$this->form_validation->set_rules('creatoruuid','Creatoruuid','required');
			$this->form_validation->set_rules('category','Category','required|integer');
			$this->form_validation->set_rules('dateUTC','DateUTC','required|integer');
			$this->form_validation->set_rules('duration','Duration','required|integer');
			$this->form_validation->set_rules('coveramount','Coveramount','required|integer');
			$this->form_validation->set_rules('simname','Simname','required|max_length[255]');
			$this->form_validation->set_rules('parcelUUID','ParcelUUID','required');
			$this->form_validation->set_rules('globalPos','GlobalPos','required|max_length[255]');
			$this->form_validation->set_rules('eventflags','Eventflags','required|integer');
			$this->form_validation->set_rules('description','Description','required');
		
			if($this->form_validation->run())     
            {   
                $params = array(
					'covercharge' => $this->input->post('covercharge'),
					'category' => $this->input->post('category'),
					'eventflags' => $this->input->post('eventflags'),
					'owneruuid' => $this->input->post('owneruuid'),
					'name' => $this->input->post('name'),
					'creatoruuid' => $this->input->post('creatoruuid'),
					'dateUTC' => $this->input->post('dateUTC'),
					'duration' => $this->input->post('duration'),
					'coveramount' => $this->input->post('coveramount'),
					'simname' => $this->input->post('simname'),
					'parcelUUID' => $this->input->post('parcelUUID'),
					'globalPos' => $this->input->post('globalPos'),
					'description' => $this->input->post('description'),
                );

                $this->Event_model->update_event($eventid,$params);            
                redirect('events/index');
            }
            else
            {
                $data['_view'] = 'event/edit';
                $this->load->view('layouts/main',$data);
            }
        }
        else
            show_error('The event you are trying to edit does not exist.');
    } 

    /*
     * Deleting event
     */
    function remove($eventid)
    {
        $event = $this->Event_model->get_event($eventid);

        // check if the event exists before trying to delete it
        if(isset($event['eventid']))
        {
            $this->Event_model->delete_event($eventid);
            redirect('events/index');
        }
        else
            show_error('The event you are trying to delete does not exist.');
    }
    
}
